// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© ruckard

//@version=5

// Current version: v20221105 ( A001 )
// Tradingview Public description - END

strategy('GapstrainRSI A001', shorttitle='A001GapstrainRSI', overlay=true, max_bars_back=5000, calc_on_order_fills=false, calc_on_every_tick=false, pyramiding=0, initial_capital=1000, slippage=1, commission_type=strategy.commission.percent, commission_value=0.04)

// INPUTS - BEGIN

i_fvgFillType = input.string(title='Filled FVG Type', defval='H/L', options=['Close', 'H/L'], group='FairValueGap')
i_fvgMaxBarsback = input.int(100, 'Max bars back to find FVGs ?', minval=10, maxval=500, group='FairValueGap', tooltip='This will look for FVG\'s x bars back. The higher the number, the slower the script will run.')
i_showFairValueGapDecision = input.bool(true, title='Show Decision {True}', group='FairValueGap')
i_showFairValueGaps = input.bool(true, title='Show Unfair Gaps {True}', group='FairValueGap')

// INPUTS - END



// Strategy - INIT - BEGIN

// FairValueGap functions
fvgGetMtfData(res) =>
    request.security(
      syminfo.tickerid,
      res,
      [
      close[1] < low[2] and high[0] < low[2], // Bearish FVG
      close[1] > high[2] and low[0] > high[2], // Bullish FVG
      open[0],   high[0],   low[0],   close[0],   time[0], bar_index[0],
      open[1], high[1], low[1], close[1], time[1], bar_index[1],
      open[2], high[2], low[2], close[2], time[2], bar_index[2]
      ],
      gaps=barmerge.gaps_off,
      lookahead=barmerge.lookahead_off
      )

isFvgFilled(type, old_bi, old_h, old_l, bi, h, l, c) => // bull/bear, open, high, low, close, bar_index, fvg bar index
    isOld = bi - old_bi > i_fvgMaxBarsback

    type == 'bull' ?
      isOld or (i_fvgFillType == 'Close' ? c : l) <= old_h
      :
      isOld or (i_fvgFillType == 'Close' ? c : h) >= old_l

isPriceInsideFvg(type, old_h, old_l, h, l, c) =>
    type == 'bull' ?
      l < old_l and (i_fvgFillType == 'Close' ? c : l) > old_h
      :
      h > old_h and (i_fvgFillType == 'Close' ? c : h) < old_l

// FUNCTIONS - END


// Strategy Body - BEGIN

// FairValueGap substrategy

fairvaluegapTimeframe = timeframe.period

// FairValueGap - Get All OHLC Data
[bearishFvg, bullishFvg, fvgOpen, fvgHigh, fvgLow, fvgClose, fvgTime, fvgBarIndex, fvgOpen1, fvgHigh1, fvgLow1, fvgClose1, fvgTime1, fvgBarIndex1, fvgOpen2, fvgHigh2, fvgLow2, fvgClose2, fvgTime2, fvgBarIndex2] = fvgGetMtfData(fairvaluegapTimeframe)

// FairValueGap - Save data to arrays
var fvgBullIndexes = array.new_int(0)
var fvgBullHighs = array.new_float(0)
var fvgBullLows = array.new_float(0)
var fvgBearIndexes = array.new_int(0)
var fvgBearHighs = array.new_float(0)
var fvgBearLows = array.new_float(0)

if bullishFvg
    array.push(fvgBullIndexes, fvgBarIndex)
    array.push(fvgBullHighs, fvgHigh2)
    array.push(fvgBullLows, fvgLow)
else if bearishFvg
    array.push(fvgBearIndexes, fvgBarIndex)
    array.push(fvgBearHighs, fvgHigh)
    array.push(fvgBearLows, fvgLow2)

// FairValueGap - Delete filled fvgs
if array.size(fvgBullIndexes) > 0
    for i = array.size(fvgBullIndexes)-1 to 0
        if isFvgFilled('bull', array.get(fvgBullIndexes,i), array.get(fvgBullHighs,i), array.get(fvgBullLows,i), fvgBarIndex, fvgHigh, fvgLow, fvgClose)
            array.remove(fvgBullIndexes, i)
            array.remove(fvgBullHighs, i)
            array.remove(fvgBullLows, i)
if array.size(fvgBearIndexes) > 0
    for i = array.size(fvgBearIndexes)-1 to 0
        if isFvgFilled('bear', array.get(fvgBearIndexes,i), array.get(fvgBearHighs,i), array.get(fvgBearLows,i), fvgBarIndex, fvgHigh, fvgLow, fvgClose)
            array.remove(fvgBearIndexes, i)
            array.remove(fvgBearHighs, i)
            array.remove(fvgBearLows, i)

// FairValueGap - Check if inside fvg
fairValueGapInsideBull = false
fairValueGapInsideBear = false

if array.size(fvgBullIndexes) > 0
    for i = array.size(fvgBullIndexes)-1 to 0
        if isPriceInsideFvg('bull', array.get(fvgBullHighs,i), array.get(fvgBullLows,i), fvgHigh, fvgLow, fvgClose)
            fairValueGapInsideBull := true
if array.size(fvgBearIndexes) > 0
    for i = array.size(fvgBearIndexes)-1 to 0
        if isPriceInsideFvg('bear', array.get(fvgBearHighs,i), array.get(fvgBearLows,i), fvgHigh, fvgLow, fvgClose)
            fairValueGapInsideBear := true

// Gap distance
float fvgGapPriceDistancePercentage = 0
float fvgGapRefillPercentage = 0
float fvgGapPercentage = 0
bool fairvaluegapOppositeLong = false
bool fairvaluegapOppositeShort = false
bool fvgGapRefillPercentageIsWithinRange = false
bool fvgGapPercentageIsWithinRange = false
if bullishFvg // LONG
    fvgGapPriceDistancePercentage := ((fvgClose - fvgHigh2) / fvgHigh2) * 100
    fvgGapRefillPercentage := fvgGapPriceDistancePercentage * i_longFvgGapTakeProfitPerOne
    fvgGapRefillPercentageIsWithinRange := ((fvgGapRefillPercentage >= i_shortFvgMinimumTakeProfitPercentage) and (fvgGapRefillPercentage < i_shortFvgMaximumTakeProfitPercentage))

    fvgGapPercentage := ((fvgLow - fvgHigh2) / fvgHigh2) * 100
    fvgGapPercentageIsWithinRange := (fvgGapPercentage >= i_longFvgMinimumGapPercentage) and (fvgGapPercentage < i_longFvgMaximumGapPercentage)

    if (fvgGapRefillPercentageIsWithinRange and fvgGapPercentageIsWithinRange)
        fairvaluegapOppositeLong := true
else if bearishFvg // SHORT
    fvgGapPriceDistancePercentage := ((fvgLow2 - fvgClose) / fvgClose) * 100
    fvgGapRefillPercentage := fvgGapPriceDistancePercentage * i_shortFvgGapTakeProfitPerOne
    fvgGapRefillPercentageIsWithinRange := ((fvgGapRefillPercentage >= i_longFvgMinimumTakeProfitPercentage) and (fvgGapRefillPercentage < i_longFvgMaximumTakeProfitPercentage))

    fvgGapPercentage := ((fvgLow2 - fvgHigh) / fvgHigh) * 100
    fvgGapPercentageIsWithinRange := (fvgGapPercentage >= i_shortFvgMinimumGapPercentage) and (fvgGapPercentage < i_shortFvgMaximumGapPercentage)

    if (fvgGapRefillPercentageIsWithinRange and fvgGapPercentageIsWithinRange)
        fairvaluegapOppositeShort := true

// Final logic
bool fairvaluegapLongShort = false
bool fairvaluegapLong = false
bool fairvaluegapShort = false

if (( fairValueGapInsideBull == true ) and ( fairValueGapInsideBear == true ))
    fairvaluegapLongShort := true

fairvaluegapLong := bullishFvg and fairvaluegapOppositeLong
fairvaluegapShort := bearishFvg and fairvaluegapOppositeShort

// FairValueGap Decision - Plot - BEGIN
fairvaluegapLongColor = i_showFairValueGapDecision ? color.new(#00c3ff, transp=0) : na
fairvaluegapShortColor = i_showFairValueGapDecision ? color.new(#ff0062, transp=0) : na
fairvaluegapLongShortColor = i_showFairValueGapDecision ? color.new(color.yellow, transp=0) : na
plotshape(fairvaluegapLong, title='FairValueGap Up', style=shape.arrowup, color=fairvaluegapLongColor, location=location.top)
plotshape(fairvaluegapShort, title='FairValueGap Down', style=shape.arrowdown, color=fairvaluegapShortColor, location=location.top)
plotshape(fairvaluegapLongShort, title='FairValueGap UpAndDown', style=shape.square, color=fairvaluegapLongShortColor, location=location.top)
// FairValueGap Decision - Plot - END

fairvaluegapBullishColor = i_showFairValueGaps ? color.new(color.green, transp=0) : na
fairvaluegapBearishColor = i_showFairValueGaps ? color.new(#ff0062, transp=0) : na
plotshape(bullishFvg, title='FairValueGap Bullish', style=shape.labelup, color=fairvaluegapBullishColor, location=location.bottom)
plotshape(bearishFvg, title='FairValueGap Bearish', style=shape.labeldown, color=fairvaluegapBearishColor, location=location.bottom)
