//@version=5

// @description Provides Risk Management related functions.
library("RiskManagementBeta", true)

// —————————— PineCoders MTF Selection Framework functions
// ————— Converts current "timeframe.multiplier" plus the TF into minutes of type float.
f_resInMinutes() =>
    _resInMinutes = timeframe.multiplier * (
      timeframe.isseconds ? 1. / 60. :
      timeframe.isminutes ? 1.       :
      timeframe.isdaily   ? 1440.    :
      timeframe.isweekly  ? 10080.   :
      timeframe.ismonthly ? 43800.   : na)

getResolutionBarMinutes(resolution) =>
    currentResInMinutes = f_resInMinutes()
    minutes = resolution == '1' ? (1 * 1) :
     resolution == '3' ? (3 * 1) :
     resolution == '5' ? (5 * 1) :
     resolution == '15' ? (15 * 1) :
     resolution == '30' ? (30 * 1) :
     resolution == '45' ? (45 * 1) :
     resolution == '60' ? (60 * 1) :
     resolution == '120' ? (2 * 60) :
     resolution == '180' ? (3 * 60) :
     resolution == '240' ? (4 * 60) :
     resolution == '1D' ? (24 * 60) :
     resolution == '1W' ? (7 * 24 * 60) :
     resolution == '1M' ? (4 * 7 * 24 * 60) :
     currentResInMinutes // Equal to current symbol
    minutes

getCurrentPeriod (_period) =>
    periodMinutes = getResolutionBarMinutes(_period)
    barMinutes = getResolutionBarMinutes(timeframe.period)
    barMinutesToNow = bar_index * barMinutes
    currentPeriod = math.floor(barMinutesToNow / periodMinutes)

// @function Returns current day number from strategy start
// @returns Current day number from strategy start
export getCurrentDay () =>
    getCurrentPeriod ('1D')

// @function Returns current week number from strategy start
// @returns Current week number from strategy start
export getCurrentWeek () =>
    getCurrentPeriod ('1W')

// @function Returns current month number from strategy start
// @returns Current month number from strategy start
export getCurrentMonth () =>
    getCurrentPeriod ('1M')

// @function Returns advised entry quantity. Otherwise returns zero if required daily, weekly and montly maximum losses have been reached.
// @param entryQuantity entry Quantity that has already been calculated
// @param currentCapital The current capital in the strategy
// @param currentDay Current day number from strategy start
// @param currentDayCapital Last capital seen in this same day
// @param currentWeek Current week number from strategy start
// @param currentWeekCapital Last capital seen in this same week
// @param currentMonth Current month number from strategy start
// @param currentMonthCapital Last capital seen in this same month
// @param maximumLossPerDay Maximum required loss per day (per unit)
// @param maximumLossPerWeek Maximum required loss per week (per unit)
// @param maximumLossPerMonth Maximum required loss per month (per unit)
// @param maximumLossPerTrade Maximum Percentual Loss of our Capital Per Trade ( E.g. 0.01 for 1%)
// @param orderStopLoss Maximum Stop Loss that an order might have. ( E.g. 0.07 for 7% )
// @param type Risk Management type. 'SAFE': Safe, 'SCOMPOUND': Somewhat Safe Compound, 'NONE': None, 'CUSTOM': Use customQuantity with risk management, 'FORCED': Use customQuantity without risk management.
// @param customQuantity Custom quantity suggested or enforced.
// @returns Advised entry quantity and extra needed variables
export advisedEntryQuantity (float currentCapital, int currentDay, float currentDayCapital, int currentWeek, float currentWeekCapital, int currentMonth, float currentMonthCapital, float maximumLossPerDay, float maximumLossPerWeek, float maximumLossPerMonth, float maximumLossPerTrade, float orderStopLoss, string type, float customQuantity = na) =>
    float p_currentDayCapital = currentDayCapital
    float p_currentWeekCapital = currentWeekCapital
    float p_currentMonthCapital = currentMonthCapital

    float entryQuantity = na
    float currentDayLoss = na
    float currentWeekLoss = na
    float currentMonthLoss = na
    float currentDayEntryQuantity = na
    float currentWeekEntryQuantity = na
    float currentMonthEntryQuantity = na

    float tmpEntryQuantity = na

    if (type == 'SAFE')
        // Safe means we stick to the original initial capital
        // to enforce our risk management policy
        tmpEntryQuantity := (strategy.initial_capital * maximumLossPerTrade) / orderStopLoss

    else if (type == 'SCOMPOUND')
        // Safe compound means that we are gambling everything we have
        // but we try to follow risk management rules
        tmpEntryQuantity:= (currentCapital * maximumLossPerTrade) / orderStopLoss

    else if (type == 'NONE')
        // None means that we are gambling always everything we have
        tmpEntryQuantity := currentCapital

    else if (type == 'CUSTOM')
        // Custom means we want to take into account our custom quantity
        tmpEntryQuantity := customQuantity

    else if (type == 'FORCED')
        // Forced means we want to take into account our custom quantity
        tmpEntryQuantity := customQuantity

    if (tmpEntryQuantity > currentCapital)
        // Avoid being stuck when numbers don't match
        entryQuantity := currentCapital
    else
        entryQuantity := tmpEntryQuantity

    // DAY
    if (currentDay[1] != currentDay)
        currentDayLoss := 0.0
        p_currentDayCapital := currentCapital
    else
        if (currentCapital < p_currentDayCapital)
            currentDayLoss := p_currentDayCapital - currentCapital
        else
            currentDayLoss := 0.0
        tmpCurrentDayLossPerOne = currentDayLoss / p_currentDayCapital
        if (tmpCurrentDayLossPerOne >= maximumLossPerDay)
            currentDayEntryQuantity:= 0.0 // Avoid entering a position

    // WEEK
    if (currentWeek[1] != currentWeek)
        currentWeekLoss := 0.0
        p_currentWeekCapital := currentCapital
    else
        if (currentCapital < p_currentWeekCapital)
            currentWeekLoss := p_currentWeekCapital - currentCapital
        else
            currentWeekLoss := 0.0
        tmpCurrentWeekLossPerOne = currentWeekLoss / p_currentWeekCapital
        if (tmpCurrentWeekLossPerOne >= maximumLossPerWeek)
            currentWeekEntryQuantity:= 0.0 // Avoid entering a position

    // MONTH
    if (currentMonth[1] != currentMonth)
        currentMonthLoss := 0.0
        p_currentMonthCapital := currentCapital
    else
        if (currentCapital < p_currentMonthCapital)
            currentMonthLoss := p_currentMonthCapital - currentCapital
        else
            currentMonthLoss := 0.0
        tmpCurrentMonthLossPerOne = currentMonthLoss / p_currentMonthCapital
        if (tmpCurrentMonthLossPerOne >= maximumLossPerMonth)
            currentMonthEntryQuantity:= 0.0 // Avoid entering a position

    // Avoid to enter a position overall logic
    if (not ((type == 'NONE') or (type == 'FORCED')) )
        if ( (not na(currentDayEntryQuantity)) or (not na(currentWeekEntryQuantity)) or (not na(currentMonthEntryQuantity)) )
            entryQuantity:= 0.0
    [entryQuantity, currentDay, p_currentDayCapital, currentWeek, p_currentWeekCapital, currentMonth, p_currentMonthCapital]
